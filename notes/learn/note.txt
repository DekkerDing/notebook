状态模式原始定义
    允许一个对象在其内部状态改变时改变它的行为对象看起来似乎修改了自己的类一样
    找到合适的抽象状态以及状态之间的转移关系通过改变状态来达到改变行为的目的
    当要设计的业务具有复杂的状态变迁时，期望通过状态变化来快速进行变更操作，并降低代码耦合性
    提前定好可能的状态，降低代码实现复杂度
    快速理解状态和行为之间的关系
    避免写大量的if-else条件语句
    可以让多个环境对象共享一个状态对象从而减少重复代码
    状态模式适合场景：对象本身具备很多状态变化同时不同变化需要不同的行为来处理
    用好状态模式，关键点在于寻找好的状态以及状态与状态之间的关系
结构
    上下文信息类（Context）：
        存储当前状态的类，对外提供更新状态的操作
    抽象状态类（State）：
        可以是一个接口或抽象类，用于定义声明状态更新的操作方法有哪些
    具体状态类（StateA等）：
        实现抽象状态类定义的方法，根据具体的场景指定对应状态改变后的代码实现逻辑
原理

预期
    对象根据自身状态的变化来进行不同行为的操作时
    对象需要根据自身变量的当前值改变行为不期望使用大量if-else语句时
    对于某些确定的状态和行为，不想使用重复代码时

资料
    https://www.bilibili.com/video/BV1hY411Y7zR?spm_id_from=333.788.videopod.episodes&vd_source=afc578e8acd436b9b937b4fb9a3c7095&p=31