命令模式原始定义
    将一个请求封装为一个对象从而可以参数化具有不同请求、队列或日志请求的其他对象，并支持可撤销的操作
    命令模式是为了将一组操作封装在对象中而设计的简单来说就是为了将函数方法封装为对象以方便传输
    命令模式通过将发送者和接收者解耦开去除了它们之间的直接引用的关系让发送者只提供命令而不必知道命令到底是如何完成的
    使用命令模式能够便捷地记录数据的排序、序列化、跟踪、日志记录等操作
结构
    抽象命令类（Command）
        用于声明需要做的操作有哪些
    具体命令类
        实现Command接口，其中存储一个接收者类并在execute调用具体命令时，委托给接收者来执行具体的方法
    调用者（lnvoker）
        客户端通过与调用者交互来操作不同的命令对象
    抽象接收者（Receiver）
        声明需要执行的命令操作，同时提供给客户端使用
    具体接收者
        实现抽象接收者，用于接收命令并执行真实的代码逻辑
原理
    围绕着命令来展开，通过抽象不同的命令，并封装到对象让不同的接收者针对同一个命令都能做出自身的反应
    围绕命令的维度来构建功能 构建上传、下载、打开、关闭这样的命令，更符合人类自然的思考逻辑
    避免了使用者需要了解大量的代码实现逻辑，起到隐藏代码逻辑的作用
    自由组合相关的命令，完成一系列的组合功能
    对命令进行封装，将发出命令的责任和执行命令的责任分离开
预期
    需要通过操作来参数化对象时
    想要将操作放入队列、按顺序执行脚本操作或者执行一些远程操作命令时
    只关心具体的命令和动作，不想知道具体的接收者是谁以及如何操作
    一些需要读取大量数据的场景中，使用命令模式来读取上下文信息能避免内存溢出的风险

资料
    https://www.bilibili.com/video/BV1hY411Y7zR?spm_id_from=333.788.videopod.episodes&vd_source=afc578e8acd436b9b937b4fb9a3c7095&p=31