DDL

DML

DCL

视图

存储过程函数

变量

流程控制 游标

触发器

窗口函数

公用表达式

约束

SELECT
    执行过程
    排序分页
    聚合函数
    子查询
    运算符

B树 与 B+树
    B树的特点：
        1.节点排序
        2.一个节点了可以存多个元素多个元素也排序了
    B+树的特点：
        1.拥有B树的特点
        2.叶子节点之间有指针
        3.非叶子节点上的元素在叶子节点上都冗余了也就是叶子节点中存储了所有的元素并且排好顺序
    Mysq索引使用的是B+树
    因为索引是用来加快查询的而B+树通过对数据进行排序所以是可以提高查询速度的然后通过一个节点中可以存储多个元素
    从而可以使得 B+树的高度不会太高
    在Mysql中一个Innodb页就是一个B+树节点
    一个Innodb页默认16kb
    所以一般情况下一颗两层的B+树可以存2000万行左右的数据然后通过利用
    B+树叶子节点存储了所有数据并且进行了排序
    并且叶子节点之间有指针
    可以很好的支持全表扫描范围查找等SQL语句

慢查询
    1.检查是否走了索引|，如果没有则优化SQL利用索引
    2.检查所利用的索引，是否是最优索引
    3.检查所查字段是否都是必须的，是否查询了过多字段，查出了多余数据
    4.检查表中数据是否过多，是否应该进行分库分表了
    5.检查数据库实例所在机器的性能配置，是否太低，是否可以适当增加资源

索引
    1.适合索引的列是出现在where子句中的列，或者连接子句中指定的列
    2.基数较小的表，索引效果较差，没有必要在此列建立索引
    3.使用短索引，如果对长字符串列进行索引，应该指定一个前缀长度，这样能够节省大量索引空间
        如果搜索词超过索引前缀长度
        则使用索引排除不匹配的行
        然后检查其余行是否可能匹配。
    4.不要过度索引。
        索引需要额外的磁盘空间，并降低写操作的性能。
        在修改表内容的时候，索引会进行更新甚至重构，索引列越多，这个时间就会越长。
        所以只保持需要的索引有利于查询即可。
    5.定义有外键的数据列一定要建立索引。
    6.更新频繁字段不适合创建索引
    7.若是不能有效区分数据的列不适合做索引列（如性别，男女未知，最多也就三种，区分度实在太低）

索引覆盖是什么
    索引覆盖就是一个SQL在执行时，可以利用索引来快速查找，
    并且此SQL所要查询的字段在当前索引对应的字段中都包含了，
    那么就表示此SQL走完索引后不用回表了，
    所需要的字段都在当前索引的叶子节点上存在，
    可以直接作为结果返回了

最左前缀原则是什么
    当一个SQL想要利用索引时就一定要提供该索引所对应的字段中最左边的字段
    也就是排在最前面的字段
    比如针对a,b,c三个字段建立了一个联合索引
    那么在写一个sql时就一定要提供a字段的条件
    这样才能用到联合索引
    这是由于在建立a,b，c三个字段的联合索引时
    底层的B+树是按照a,b,c三个字段从左往右去比较大小进行排序的
    所以如果想要利用B+树进行快速查找也得符合这个规则