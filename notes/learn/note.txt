参考资料
官网地址：https://camunda.com/
中文站点：http://camunda-cn.shaochenfeng.com/
下载：https://downloads.camunda.cloud/release/camunda-bpm/run/7.15/
案例地址：Congratulation!|docs.camunda.org

工作流运行步骤
    流程定义
    流程部署
    启动流程实例
        获取待办任务
            用户代办任务
            通用代办任务
            数据结构
                通用参数
                    act_ge
                    通用流程变量
                    通用流程实例
                    通用流程定义
                    通用流程资源
                历史
                    act_hi
                    流程实例
                    流程变量
                    流程任务
                流程定义
                    act_re
                    内容
                    静态资源
                    部署状态
                流程运行
                    act_ru
                    运行时流程变量
                    运行时流程实例
                    运行时流程任务
                    运行时流程参数数据
    结束流程实例


ProcessEngine

任务分配
    固定值：
    值表达式：
    方法表达式：
    监听器：

流程变量
    运行时变量
    历史变量

候选人/候选人组

其他功能项
    在线流程编辑器 设计器
    节点自定义操作按钮
    自定义表单
        动态表单
        代码扩展表单
    流程部署
    流程文件导入导出
    流程
        发起流程
        查询流程
            我的发起
            待办任务
            已办任务
            经办任务
            外部任务
        审批流程
        驳回流程
        终止流程
        撤回流程
        重启流程
        挂起流程
        恢复流程
        撤销流程
        加签流程
        减签流程
        转派流程
    多租户
    监听器
    流程超时
    流程看板

Camunda
    支持完整的 BPMN 2.0 规范（如事件子流程、补偿处理、多实例任务等、网关），适合复杂业务流程建模
    外部任务模式：解耦流程执行与业务逻辑，适合异步、分布式场景
    提供基于 DMN（决策模型）的自动化规则引擎，支持复杂的业务决策逻辑
    支持嵌入到微服务架构中，通过 Camunda External Task 模式实现分布式流程执行
    支持自定义任务类型、事件监听器和流程插件
    可集成消息队列（如 Kafka、RabbitMQ）实现异步通信
    实时监控流程实例、任务状态、错误处理等
    不同点
        Camunda 支持分布式任务分片
        功能深度：Camunda 对 BPMN 2.0 的支持更全面（如事件子流程、补偿机制），适合复杂场景
        监控能力：Camunda Cockpit 提供开箱即用的可视化运维工具，Activiti/Flowable 需要二次开发
        外部任务模式：Camunda 的 External Task 模式天然适配微服务架构，Flowable 则需要通过 REST API 或消息队列实现
        流程复杂性：Camunda 对超长事务、补偿机制的支持更成熟
    什么是超长事务？
        传统事务：基于 ACID（原子性、一致性、隔离性、持久性）的短事务，例如数据库事务（秒级完成）
        超长事务：跨多个服务、耗时较长（小时/天级）的流程，例如订单履约（涉及库存锁定、支付、物流等步骤）传统 ACID 事务无法直接适用
            Camunda 将超长事务拆分为多个独立的 流程步骤（Activities），每个步骤通过 异步机制 执行，持久化中间状态到数据库
            每个步骤完成后，状态保存到数据库，后续步骤通过消息或定时器触发
    超时与重试机制：
        通过边界定时器事件（Boundary Timer Event）或重试配置 处理超时或失败任务
    什么是补偿机制？
        补偿机制用于在流程部分失败时，回滚已完成的业务操作。例如：
            订单取消后，需释放已锁定的库存、回退支付操作。
            传统事务中通过 ROLLBACK 实现，但在分布式超长事务中需显式定义补偿逻辑
        通过补偿边界事件（Compensation Boundary Event）或补偿中间事件（Compensation Intermediate Event）触发补偿流程
            补偿流程的执行逻辑
                触发补偿：通过抛出补偿事件 或显式调用 signalEventReceived("compensation")。
                逆向执行：Camunda 按反向顺序 执行已完成的补偿任务。
                幂等性要求：补偿操作需支持多次执行（如多次回滚库存不影响最终状态）
    开发中的潜在问题
        资源占用：频繁的数据库状态更新可能成为性能瓶颈，需优化数据库（索引、分库分表）。
        数据一致性：需配合 Saga 模式实现最终一致性，例如在支付失败后触发库存回滚。
        恢复复杂性：部分场景需手动干预（如人工任务处理超时流程）。
        日志管理：长时间运行的流程会产生大量历史日志，需定期归档或清理
        补偿逻辑复杂性：需为每个正向操作设计对应的补偿逻辑，代码量可能翻倍。
        测试难度：需模拟分布式故障场景（如部分服务宕机）验证补偿流程。
        幂等性挑战：补偿操作必须保证幂等（例如使用唯一事务 ID 避免重复回滚）。
        并发补偿风险：多个补偿流程并发执行时可能冲突，需加锁或设计隔离机制

Activiti7